<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>MyTicketsDashlet</Name>
    <Version>0.0.9</Version>
    <Vendor>MAWOH GmbH</Vendor>
    <URL>http://www.mawoh.de/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2014-02-17 22:00:00" Version="0.0.3">First release.</ChangeLog>
    <ChangeLog Date="2014-03-18 14:20:00" Version="0.0.4">add translations, fix default settings in sysconfig xml</ChangeLog>
    <ChangeLog Date="2014-03-18 15:00:00" Version="0.0.5">add missing translation file</ChangeLog>
    <ChangeLog Date="2014-04-03 16:40:00" Version="0.0.6">add tabs for reminder and pending tickets</ChangeLog>
    <ChangeLog Date="2014-04-03 16:40:00" Version="0.0.7">increase column width</ChangeLog>
    <ChangeLog Date="2015-03-12 16:00:00" Version="0.0.8">fix search filter and README</ChangeLog>
    <ChangeLog Date="2015-03-17 14:00:00" Version="0.0.9">first version for OTRS 4</ChangeLog>
    <Description Lang="en">MyTicketsDashlet provides a dashboard widget that shows all tickets of an agent..</Description>
    <Description Lang="de">MyTicketsDashlet stellt ein Dashboard Widget zur Verf&amp;uuml;gung, welches alle Tickets des angemeldeten Agenten anzeigt.</Description>
    <Framework>4.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to INSTALL the MyTicketsDashlet OTRS module.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket MyTicketsDashlet zu installieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroInstall Lang="en" Title="Install Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank you for choosing the MyTicketsDashlet module.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroInstall Lang="en" Title="Install Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Vielen Dank fuer die Auswahl des MyTicketsDashlet Modules.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to UNINSTALL the MyTicketsDashlet OTRS module.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUninstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket MyTicketsDashlet zu aktualisieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUninstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank you for choosing the MyTicketsDashlet module.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUninstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Vielen Dank fuer die Auswahl des MyTicketsDashlet Modules.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to UPGRADE the MyTicketsDashlet OTRS module.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket MyTicketsDashlet zu deinstallieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank you for choosing the MyTicketsDashlet module.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;Willkommen&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Vielen Dank fuer die Auswahl des MyTicketsDashlet Modules.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        MAWOH - secure your company&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <BuildDate>2015-04-22 12:41:55</BuildDate>
    <BuildHost>dev.int.mawoh.de</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/MyTicketsDashlet.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iRGFzaGJvYXJkQmFja2VuZCMjIzAwOTAtTXlUaWNrZXRzRGFzaGxldCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5QYXJhbWV0ZXJzIGZvciB0aGUgZGFzaGJvYXJkIGJhY2tlbmQgb2YgdGhlICJNeSBvcGVuIFRpY2tldCIgb3ZlcnZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4gIkxpbWl0IiBpcyB0aGUgbnVtYmVyIG9mIGVudHJpZXMgc2hvd24gYnkgZGVmYXVsdC4gIkdyb3VwIiBpcyB1c2VkIHRvIHJlc3RyaWN0IHRoZSBhY2Nlc3MgdG8gdGhlIHBsdWdpbiAoZS4gZy4gR3JvdXA6IGFkbWluO2dyb3VwMTtncm91cDI7KS4gIkRlZmF1bHQiIGRldGVybWluZXMgaWYgdGhlIHBsdWdpbiBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgb3IgaWYgdGhlIHVzZXIgbmVlZHMgdG8gZW5hYmxlIGl0IG1hbnVhbGx5LiAiQ2FjaGVUVExMb2NhbCIgaXMgdGhlIGNhY2hlIHRpbWUgaW4gbWludXRlcyBmb3IgdGhlIHBsdWdpbi48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5UaWNrZXQ8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Gcm9udGVuZDo6QWdlbnQ6OkRhc2hib2FyZDwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6T3V0cHV0OjpIVE1MOjpEYXNoYm9hcmRUaWNrZXRNeVRpY2tldHNEYXNobGV0PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJUaXRsZSI+TXkgVGlja2V0czwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRGVzY3JpcHRpb24iPkFsbCBteSB0aWNrZXRzPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJBdHRyaWJ1dGVzIj48L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkZpbHRlciI+T3BlbjwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVGltZSI+QWdlPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJMaW1pdCI+MjU8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IlBlcm1pc3Npb24iPnJ3PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJCbG9jayI+Q29udGVudExhcmdlPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJHcm91cCI+PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEZWZhdWx0Ij4xPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDYWNoZVRUTExvY2FsIj4wLjU8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkRlZmF1bHRDb2x1bW5zIj4KICAgICAgICAgICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJBZ2UiPjI8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ2hhbmdlZCI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDdXN0b21lcklEIj4xPC9JdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkN1c3RvbWVyTmFtZSI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDdXN0b21lclVzZXJJRCI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJFc2NhbGF0aW9uUmVzcG9uc2VUaW1lIj4xPC9JdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkVzY2FsYXRpb25Tb2x1dGlvblRpbWUiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRXNjYWxhdGlvblRpbWUiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRXNjYWxhdGlvblVwZGF0ZVRpbWUiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVGlja2V0TnVtYmVyIj4yPC9JdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkxvY2siPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iT3duZXIiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUGVuZGluZ1RpbWUiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUXVldWUiPjI8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUmVzcG9uc2libGUiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUHJpb3JpdHkiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iU2VydmljZSI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJTdGF0ZSI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJTTEEiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVGl0bGUiPjI8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVHlwZSI+MTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgICAgICAgICA8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+Cjwvb3Ryc19jb25maWc+Cgo=</File>
        <File Location="Kernel/Language/de_MyTicketsDashlet.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9kZV9NeVRpY2tldHNEYXNobGV0LnBtIC0gdHJhbnNsYXRpb24gZmlsZQojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Okxhbmd1YWdlOjpkZV9NeVRpY2tldHNEYXNobGV0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAjIFRlbXBsYXRlOiBBQUFJVFNNQ29uZmlnSXRlbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTXkgVGlja2V0cyd9ID0gJ01laW5lIFRpY2tldHMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3BlbiB0aWNrZXRzJ30gPSAnb2ZmZW5lbiBUaWNrZXRzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlbWluZGVyIHRpY2tldHMnfSA9ICdFcmlubmVydW5nc3RpY2tldHMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGVuZGluZyB0aWNrZXRzJ30gPSAnV2FydGVudGlja2V0cyc7Cgp9CgoxOwoK</File>
        <File Location="Kernel/Output/HTML/DashboardTicketMyTicketsDashlet.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentDashboardTicketMyTicketsDashlet.tt" Permission="644" Encode="Base64"></File>
        <File Location="doc/en/MyTicketsDashlet.pod" Permission="644" Encode="Base64">PXBvZAoKPWhlYWQxIE5hbWUKCk15VGlja2V0c0Rhc2hsZXQKCj1oZWFkMSBEZXNjcmlwdGlvbgoKVGhpcyBwYWNrYWdlcyBwcm92aWRlcyBkYXNoYm9hcmQgbW9kdWxlIHRoYXQgc2hvd3Mgb25seSBteSB0aWNrZXRzLgoKPWhlYWQxIFByZXJlcXVpc2l0ZXMKCj1vdmVyCgo9aXRlbSAqIE9UUlMgNC4wCgo9YmFjawoKPWhlYWQxIEluc3RhbGxhdGlvbgoKRG93bmxvYWQgdGhlIHBhY2thZ2UgYW5kIGluc3RhbGwgaXQgdmlhIGFkbWluIGludGVyZmFjZSAtPiBwYWNrYWdlIG1hbmFnZXIuCgo9aGVhZDEgQ29uZmlndXJhdGlvbgoKPW92ZXIKCj1pdGVtICogQ29uZmlndXJlIGl0IHZpYSBhZG1pbiBpbnRlcmZhY2UgLT4gU3lzQ29uZmlnCgo9aXRlbSAqIFRpY2tldCAtPiBGcm9udGVuZDo6QWdlbnQ6OkRhc2hib2FyZCAtPiBEYXNoYm9hcmRCYWNrZW5kIyMjMDA5MC1NeVRpY2tldHNEYXNobGV0Cgo9aXRlbSAqIEJ5IGRlZmF1bHQgdGhlIG1vZHVsZSBpcyBlbmFibGVkLgoKPWJhY2sKCj1oZWFkMSBTb3VyY2UgQ29kZQoKRm9yayBtZSBvbiBnaXRodWIgTDxodHRwczovL2dpdGh1Yi5jb20vZnJlbmV0aWNmL015VGlja2V0c0Rhc2hsZXQ+Cgo9aGVhZDEgTGljZW5zZQoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdSBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWN1dAoK</File>
    </Filelist>
</otrs_package>